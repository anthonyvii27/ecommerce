generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customer {
  cpf                 String                @id @db.Char(11)
  customer_name       String                @db.VarChar(255)
  customer_password   String                @db.VarChar(255)
  birthdate           DateTime              @db.Date
  gender              customergender
  phone_number        String                @db.VarChar(14)
  customer_email      String                @db.VarChar(255)
  wpp_notifications   Boolean
  email_notification  Boolean
  created_at          DateTime              @db.Timestamp(6)
  updated_at          DateTime?             @db.Timestamp(6)
  customer_addresses  customer_addresses[]
  customer_bank_cards customer_bank_cards[] @ignore
  favorites           favorites[]
  product_rating      product_rating[]
}

model customer_addresses {
  id           Int      @id @default(autoincrement())
  street       String   @db.VarChar(255)
  city         String   @db.VarChar(255)
  state        String   @db.VarChar(255)
  number       Int
  zip_code     String   @db.Char(8)
  customer_cpf String   @db.Char(11)
  customer     customer @relation(fields: [customer_cpf], references: [cpf], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_cpf")
}

model product {
  id                  Int              @id @default(autoincrement())
  product_name        String           @db.VarChar(255)
  product_description String           @db.VarChar(255)
  original_price      Decimal          @db.Money
  discount_price      Decimal?         @db.Money
  product_datasheet   Json             @db.Json
  created_at          DateTime         @db.Timestamp(6)
  updated_at          DateTime?        @db.Timestamp(6)
  category_id         Int              @default(autoincrement())
  product_category    product_category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category_id")
  favorites           favorites[]
  product_image       product_image[]
  product_rating      product_rating[]
}

model product_category {
  id                   Int       @id @default(autoincrement())
  category_name        String    @db.VarChar(255)
  category_description String?   @db.VarChar(255)
  product              product[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model product_inventory {
  product_id Int    @default(autoincrement())
  sku        String @db.Char(13)
  color      String @db.VarChar(50)
  size       String @db.VarChar(5)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model customer_bank_cards {
  customer_cpf       String   @db.Char(11)
  card_number        String   @db.Char(16)
  card_name          String   @db.VarChar(255)
  card_expiring_date String   @db.Char(5)
  customer           customer @relation(fields: [customer_cpf], references: [cpf], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_cpf")

  @@ignore
}

model favorites {
  customer_cpf String   @db.Char(11)
  product_id   Int      @default(autoincrement())
  customer     customer @relation(fields: [customer_cpf], references: [cpf], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_cpf")
  product      product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")

  @@id([customer_cpf, product_id])
}

model product_image {
  id         Int     @id @default(autoincrement())
  url_image  String  @db.VarChar(1000)
  product_id Int     @default(autoincrement())
  product    product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
}

model product_rating {
  id           Int      @id @default(autoincrement())
  customer_cpf String   @db.Char(11)
  product_id   Int      @default(autoincrement())
  rating       Int
  comment      String   @db.VarChar(500)
  customer     customer @relation(fields: [customer_cpf], references: [cpf], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_cpf")
  product      product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
}

enum customergender {
  Masculino
  Feminino
  Neutro
  N_o_informar @map("NÃ£o informar")
}
